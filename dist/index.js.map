{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ulpdiff = require( '@stdlib/number-float64-base-ulp-difference' );\n\n\n// MAIN //\n\n/**\n* Tests if two double-precision floating-point numbers are approximately equal within a specified number of ULPs (units in the last place).\n*\n* ## Notes\n*\n* -   The function returns `false` if either input value is `NaN`.\n* -   The function does not distinguish between `-0` and `+0`, treating them as equal.\n*\n* @param {number} a - first input value\n* @param {number} b - second input value\n* @param {number} maxULP - maximum allowed ULP difference\n* @returns {boolean} boolean indicating whether two double-precision floating-point numbers are approximately equal within a specified number of ULPs\n*\n* @example\n* var EPS = require( '@stdlib/constants-float64-eps' );\n*\n* var bool = isAlmostEqualValue( 1.0, 1.0+EPS, 1 );\n* // returns true\n*\n* bool = isAlmostEqualValue( 1.0+EPS, 1.0, 1 );\n* // returns true\n*\n* bool = isAlmostEqualValue( 1.0, 1.0+EPS+EPS, 1 );\n* // returns false\n*\n* bool = isAlmostEqualValue( 1.0, 1.0+EPS, 0 );\n* // returns false\n*\n* bool = isAlmostEqualValue( 0.0, -0.0, 0 );\n* // returns true\n*\n* bool = isAlmostEqualValue( 1.0, NaN, 1 );\n* // returns false\n*\n* bool = isAlmostEqualValue( NaN, NaN, 1 );\n* // returns false\n*/\nfunction isAlmostEqualValue( a, b, maxULP ) {\n\treturn ulpdiff( a, b ) <= maxULP;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isAlmostEqualValue;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if two double-precision floating-point numbers are approximately equal within a specified number of ULPs (units in the last place).\n*\n* @module @stdlib/number-float64-base-assert-is-almost-equal-value\n*\n* @example\n* var EPS = require( '@stdlib/constants-float64-eps' );\n* var isAlmostEqualValue = require( '@stdlib/number-float64-base-assert-is-almost-equal-value' );\n*\n* var bool = isAlmostEqualValue( 1.0, 1.0+EPS, 1 );\n* // returns true\n*\n* bool = isAlmostEqualValue( 1.0+EPS, 1.0, 1 );\n* // returns true\n*\n* bool = isAlmostEqualValue( 1.0, 1.0+EPS+EPS, 1 );\n* // returns false\n*\n* bool = isAlmostEqualValue( 1.0, 1.0+EPS, 0 );\n* // returns false\n*\n* bool = isAlmostEqualValue( 0.0, -0.0, 0 );\n* // returns true\n*\n* bool = isAlmostEqualValue( 1.0, NaN, 1 );\n* // returns false\n*\n* bool = isAlmostEqualValue( NaN, NaN, 1 );\n* // returns false\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,4CAA6C,EA0CpE,SAASC,EAAoBC,EAAGC,EAAGC,EAAS,CAC3C,OAAOJ,EAASE,EAAGC,CAAE,GAAKC,CAC3B,CAKAL,EAAO,QAAUE,IClBjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "ulpdiff", "isAlmostEqualValue", "a", "b", "maxULP", "main"]
}
